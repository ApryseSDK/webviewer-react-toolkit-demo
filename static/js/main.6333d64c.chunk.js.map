{"version":3,"sources":["ThemeButton.tsx","utils.ts","App.tsx","index.tsx"],"names":["ThemeButton","html","useRef","document","documentElement","useState","localStorage","getItem","darkTheme","setDarkTheme","useLayoutEffect","newTheme","current","setAttribute","setTimeout","setItem","IconButton","onClick","t","title","splitPages","source","a","newFiles","window","CoreControls","createDocument","i","push","File","name","getFilename","fileObj","extractXFDF","xfdf","extractPages","xfdfString","data","arr","Uint8Array","Blob","type","getPageCount","joinPages","files","firstFile","found","match","clone","file","documentObj","get","pageNumbers","Array","from","length","_","k","updateDocumentObj","insertPages","App","loading","setLoading","useManagedFiles","setFiles","draggingIds","fileOrganizerProps","getThumbnailSelectionProps","hasFiles","handleLoadPDF","process","handleDownloadPDF","blob","fileSaver","saveAs","className","FileOrganizer","onRenderDragLayer","ThumbnailDragLayer","numFiles","onRenderThumbnail","id","onRenderThumbnailProps","Thumbnail","Spinner","ButtonGroup","centerMobile","position","Button","disabled","buttonStyle","setWorkerPath","ReactDOM","render","getElementById"],"mappings":"4YAGO,SAASA,IACd,IAAMC,EAAOC,iBAAOC,SAASC,iBADD,EAGMC,oBAAS,iBAA6C,SAAvCC,aAAaC,QAAQ,iBAH1C,mBAGrBC,EAHqB,KAGVC,EAHU,KAW5B,OANAC,2BAAgB,WACd,IAAMC,EAAWH,EAAY,OAAS,GACtCP,EAAKW,QAAQC,aAAa,aAAcF,GACxCG,YAAW,kBAAMR,aAAaS,QAAQ,aAAcJ,QACnD,CAACH,IAGF,kBAACQ,EAAA,EAAD,CAAYC,QAAS,kBAAMR,GAAa,SAAAS,GAAC,OAAKA,MAAIC,MAAK,oBAAeX,EAAY,QAAU,OAArC,WACpDA,EAAY,eAAO,gB,YCTnB,SAAeY,EAAtB,kC,4CAAO,WAA0BC,GAA1B,qBAAAC,EAAA,6DACCC,EAAW,GADZ,SAEkBC,OAAOC,aAAaC,eAAeL,GAFrD,OAKL,IAHMlB,EAFD,kBAKIwB,GACPJ,EAASK,KACP,IAAIC,IAAK,CAEPC,KAAK,GAAD,OAAKH,EAAL,YAAUxB,EAAS4B,eACvBC,QAAQ,WAAD,4BAAE,gCAAAV,EAAA,sEACYnB,EAAS8B,YAAY,CAACN,IADlC,cACDO,EADC,gBAEY/B,EAASgC,aAAa,CAACR,GAAIO,EAAKE,YAF5C,cAEDC,EAFC,OAGDC,EAAM,IAAIC,WAAWF,GAHpB,kBAIA,IAAIG,KAAK,CAACF,GAAM,CAAEG,KAAM,qBAJxB,2CAAF,kDAAC,OALLd,EAAI,EAAGA,GAAKxB,EAASuC,eAAgBf,IAAM,EAA3CA,GALJ,yBAoBEJ,GApBF,4C,sBA4BA,SAAeoB,EAAtB,kC,4CAAO,WAAyBC,GAAzB,yBAAAtB,EAAA,sDACCuB,EAAYD,EAAM,GAGlBE,EAAQD,EAAUf,KAAKiB,MAAM,aAC7BjB,EAAOgB,EAAO,GAIdE,EAAQH,EAAUG,MAAM,CAAElB,SAT3B,IAAAR,EAAA,iBAeIK,GAfJ,mBAAAL,EAAA,6DAgBG2B,EAAOL,EAAMjB,GAhBhB,SAiBoBsB,EAAKC,YAAYC,MAjBrC,cAiBGhD,EAjBH,OAkBGiD,EAAcC,MAAMC,KAAK,CAAEC,OAAQpD,EAASuC,iBAAkB,SAACc,EAAGC,GAAJ,OAAUA,EAAI,KAlB/E,SAoBGT,EAAMU,kBAAN,uCAAwB,WAAMR,GAAN,SAAA5B,EAAA,sEACtB4B,EAAYS,YAAYxD,EAAUiD,EAAaF,EAAYR,eAAiB,GADtD,2CAAxB,uDApBH,0CAeIf,EAAI,EAfR,YAeWA,EAAIiB,EAAMW,QAfrB,0CAeI5B,GAfJ,eAe6BA,IAf7B,gDAyBEqB,GAzBF,6C,sBCkDQY,MArEf,WAAgB,IAAD,EACiBvD,oBAAS,GAD1B,mBACNwD,EADM,KACGC,EADH,OAE4EC,cAAjFnB,EAFK,EAELA,MAAOoB,EAFF,EAEEA,SAAUC,EAFZ,EAEYA,YAAaC,EAFzB,EAEyBA,mBAAoBC,EAF7C,EAE6CA,2BAEpDC,EAAWxB,EAAMW,OAAS,EAE1Bc,EAAa,uCAAG,4BAAA/C,EAAA,0DAEhB8C,EAFgB,yCAGXJ,EAAS,KAHE,cAMpBF,GAAW,GAIIQ,yDAVK,SAYGlD,EAFRkD,0DAVK,OAYd/C,EAZc,OAcpByC,EAASzC,GACTuC,GAAW,GAfS,2CAAH,qDAkBbS,EAAiB,uCAAG,gCAAAjD,EAAA,6DACxBwC,GAAW,GADa,SAGLnB,EAAUC,GAHL,cAGlBK,EAHkB,gBAILA,EAAKjB,QAAQmB,MAJR,OAIlBqB,EAJkB,OAKlB1C,EAAOmB,EAAKnB,KAElB2C,IAAUC,OAAOF,EAAM1C,GAEvBgC,GAAW,GATa,4CAAH,qDAYvB,OACE,yBAAKa,UAAU,OACb,0BAAMA,UAAU,aACbP,EACC,kBAACQ,EAAA,EAAD,iBACMV,EADN,CAEES,UAAU,YACVE,kBAAmB,kBAAM,kBAACC,EAAA,EAAD,CAAoBC,SAAUd,EAAYV,UACnEyB,kBAAmB,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,uBAAP,OACjB,kBAACC,EAAA,EAAD,iBAAehB,EAA2Bc,GAASC,QAIvD,yBAAKP,UAAU,oBAAoBd,EAAU,kBAACuB,EAAA,EAAD,MAAc,8CAG/D,4BAAQT,UAAU,eAChB,kBAACU,EAAA,EAAD,CAAaC,cAAY,EAACC,SAAS,iBACjC,kBAACvF,EAAD,MACA,kBAACqF,EAAA,EAAD,CAAaC,cAAY,GACvB,kBAACE,EAAA,EAAD,CAAQC,SAAU5B,EAAS6B,YAAY,aAAazE,QAASoD,GAC1DD,EAAW,aAAe,YAE7B,kBAACoB,EAAA,EAAD,CAAQC,SAAU5B,IAAYO,EAAUnD,QAASsD,GAAjD,qBCpEZ/C,OAAOC,aAAakE,cAAc,cAElCC,IAASC,OAAO,kBAAC,EAAD,MAAS1F,SAAS2F,eAAe,W","file":"static/js/main.6333d64c.chunk.js","sourcesContent":["import { IconButton } from '@pdftron/webviewer-react-toolkit';\nimport React, { useLayoutEffect, useRef, useState } from 'react';\n\nexport function ThemeButton() {\n  const html = useRef(document.documentElement);\n\n  const [darkTheme, setDarkTheme] = useState(() => localStorage.getItem('data-theme') === 'dark');\n\n  useLayoutEffect(() => {\n    const newTheme = darkTheme ? 'dark' : '';\n    html.current.setAttribute('data-theme', newTheme);\n    setTimeout(() => localStorage.setItem('data-theme', newTheme));\n  }, [darkTheme]);\n\n  return (\n    <IconButton onClick={() => setDarkTheme(t => !t)} title={`Change to ${darkTheme ? 'light' : 'dark'} theme`}>\n      {darkTheme ? '‚òÄÔ∏è' : 'üåô'}\n    </IconButton>\n  );\n}\n","import { File } from '@pdftron/webviewer-react-toolkit';\n\n/**\n * Takes a file at `source` and splits it into an array of `File`, one for each\n * page of the original file.\n * @param source The source of the file to split.\n */\nexport async function splitPages(source: string): Promise<File[]> {\n  const newFiles = [];\n  const document = await window.CoreControls.createDocument(source);\n\n  // Here, we split up the loaded PDF into multiple files, one for each page.\n  for (let i = 1; i <= document.getPageCount(); i++) {\n    newFiles.push(\n      new File({\n        // Add page number to beginning of file name.\n        name: `${i}_${document.getFilename()}`,\n        fileObj: async () => {\n          const xfdf = await document.extractXFDF([i]);\n          const data = await document.extractPages([i], xfdf.xfdfString);\n          const arr = new Uint8Array(data);\n          return new Blob([arr], { type: 'application/pdf' });\n        },\n      }),\n    );\n  }\n\n  return newFiles;\n}\n\n/**\n * Joins multiple files into a single file. This is used for joining pages into\n * a single file.\n * @param files An array of files to join.\n */\nexport async function joinPages(files: File[]): Promise<File> {\n  const firstFile = files[0];\n\n  // Remove page number prefix added in `splitPages`.\n  const found = firstFile.name.match(/^\\d+_(.+)/);\n  const name = found![1];\n\n  // Create a clone of the first page file since the next operation to add pages\n  // is a mutating operation, and we don't want to mutate the page file.\n  const clone = firstFile.clone({ name });\n\n  // For each file after the initial one (which was used already to create the\n  // clone) we insert that file as a new page into the clone documentObj. We use\n  // `updateDocumentObj` to let the clone know that a mutation is occuring on\n  // the documentObj so it can update the internal Blob.\n  for (let i = 1; i < files.length; i++) {\n    const file = files[i];\n    const document = await file.documentObj.get();\n    const pageNumbers = Array.from({ length: document.getPageCount() }, (_, k) => k + 1);\n\n    await clone.updateDocumentObj(async documentObj => {\n      await documentObj.insertPages(document, pageNumbers, documentObj.getPageCount() + 1);\n    });\n  }\n\n  return clone;\n}\n","import {\n  Button,\n  ButtonGroup,\n  File,\n  FileOrganizer,\n  Spinner,\n  Thumbnail,\n  ThumbnailDragLayer,\n  useManagedFiles,\n} from '@pdftron/webviewer-react-toolkit';\nimport fileSaver from 'file-saver';\nimport React, { useState } from 'react';\nimport './App.css';\nimport { ThemeButton } from './ThemeButton';\nimport { joinPages, splitPages } from './utils';\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const { files, setFiles, draggingIds, fileOrganizerProps, getThumbnailSelectionProps } = useManagedFiles<File>();\n\n  const hasFiles = files.length > 0;\n\n  const handleLoadPDF = async () => {\n    // If called while files exist, clear the files.\n    if (hasFiles) {\n      return setFiles([]);\n    }\n\n    setLoading(true);\n\n    // Set the source to point to your PDF. In this example, we have the PDF\n    // inside of `public/assets`. You can add any path, or a URL to a PDF.\n    const source = process.env.PUBLIC_URL + '/assets/PDFTRON_about.pdf';\n\n    const newFiles = await splitPages(source);\n\n    setFiles(newFiles);\n    setLoading(false);\n  };\n\n  const handleDownloadPDF = async () => {\n    setLoading(true);\n\n    const file = await joinPages(files);\n    const blob = await file.fileObj.get();\n    const name = file.name;\n\n    fileSaver.saveAs(blob, name);\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <main className=\"app__main\">\n        {hasFiles ? (\n          <FileOrganizer\n            {...fileOrganizerProps}\n            className=\"organizer\"\n            onRenderDragLayer={() => <ThumbnailDragLayer numFiles={draggingIds.length} />}\n            onRenderThumbnail={({ id, onRenderThumbnailProps }) => (\n              <Thumbnail {...getThumbnailSelectionProps(id)} {...onRenderThumbnailProps} />\n            )}\n          />\n        ) : (\n          <div className=\"app__placeholder\">{loading ? <Spinner /> : 'Click Load PDF to begin organizing pages.'}</div>\n        )}\n      </main>\n      <footer className=\"app__footer\">\n        <ButtonGroup centerMobile position=\"space-between\">\n          <ThemeButton />\n          <ButtonGroup centerMobile>\n            <Button disabled={loading} buttonStyle=\"borderless\" onClick={handleLoadPDF}>\n              {hasFiles ? 'Delete PDF' : 'Load PDF'}\n            </Button>\n            <Button disabled={loading || !hasFiles} onClick={handleDownloadPDF}>\n              Download PDF\n            </Button>\n          </ButtonGroup>\n        </ButtonGroup>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Set the path to your Web Worker. This will be relative to your html file\n// (which is in `public`) so you will need to path to `'./lib/core'`\nwindow.CoreControls.setWorkerPath('./lib/core');\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}