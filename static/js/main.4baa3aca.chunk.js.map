{"version":3,"sources":["utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["splitPages","source","a","newFiles","window","CoreControls","createDocument","document","i","push","File","name","getFilename","fileObj","extractXFDF","xfdf","extractPages","xfdfString","data","arr","Uint8Array","Blob","type","getPageCount","joinPages","files","firstFile","found","match","clone","file","documentObj","get","pageNumbers","Array","from","length","_","k","updateDocumentObj","insertPages","App","useState","loading","setLoading","useManagedFiles","setFiles","draggingIds","fileOrganizerProps","getThumbnailSelectionProps","hasFiles","handleLoadPDF","process","handleDownloadPDF","blob","fileSaver","saveAs","className","FileOrganizer","onRenderDragLayer","ThumbnailDragLayer","numFiles","onRenderThumbnail","id","onRenderThumbnailProps","Thumbnail","Spinner","ButtonGroup","Button","disabled","buttonStyle","onClick","Boolean","location","hostname","setWorkerPath","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4baa3aca.chunk.js","sourcesContent":["import { File } from '@pdftron/webviewer-react-toolkit';\n\n/**\n * Takes a file at `source` and splits it into an array of `File`, one for each\n * page of the original file.\n * @param source The source of the file to split.\n */\nexport async function splitPages(source: string): Promise<File[]> {\n  const newFiles = [];\n  const document = await window.CoreControls.createDocument(source);\n\n  // Here, we split up the loaded PDF into multiple files, one for each page.\n  for (let i = 1; i <= document.getPageCount(); i++) {\n    newFiles.push(\n      new File({\n        // Add page number to beginning of file name.\n        name: `${i}_${document.getFilename()}`,\n        fileObj: async () => {\n          const xfdf = await document.extractXFDF([i]);\n          const data = await document.extractPages([i], xfdf.xfdfString);\n          const arr = new Uint8Array(data);\n          return new Blob([arr], { type: 'application/pdf' });\n        },\n      }),\n    );\n  }\n\n  return newFiles;\n}\n\n/**\n * Joins multiple files into a single file. This is used for joining pages into\n * a single file.\n * @param files An array of files to join.\n */\nexport async function joinPages(files: File[]): Promise<File> {\n  const firstFile = files[0];\n\n  // Remove page number prefix added in `splitPages`.\n  const found = firstFile.name.match(/^\\d+_(.+)/);\n  const name = found![1];\n\n  // Create a clone of the first page file since the next operation to add pages\n  // is a mutating operation, and we don't want to mutate the page file.\n  const clone = firstFile.clone({ name });\n\n  // For each file after the initial one (which was used already to create the\n  // clone) we insert that file as a new page into the clone documentObj. We use\n  // `updateDocumentObj` to let the clone know that a mutation is occuring on\n  // the documentObj so it can update the internal Blob.\n  for (let i = 1; i < files.length; i++) {\n    const file = files[i];\n    const document = await file.documentObj.get();\n    const pageNumbers = Array.from({ length: document.getPageCount() }, (_, k) => k + 1);\n\n    await clone.updateDocumentObj(async documentObj => {\n      await documentObj.insertPages(document, pageNumbers, documentObj.getPageCount() + 1);\n    });\n  }\n\n  return clone;\n}\n","import {\n  Button,\n  ButtonGroup,\n  File,\n  FileOrganizer,\n  Spinner,\n  Thumbnail,\n  ThumbnailDragLayer,\n  useManagedFiles,\n} from '@pdftron/webviewer-react-toolkit';\nimport fileSaver from 'file-saver';\nimport React, { useState } from 'react';\nimport './App.css';\nimport { joinPages, splitPages } from './utils';\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const { files, setFiles, draggingIds, fileOrganizerProps, getThumbnailSelectionProps } = useManagedFiles<File>();\n\n  const hasFiles = files.length > 0;\n\n  const handleLoadPDF = async () => {\n    // If called while files exist, clear the files.\n    if (hasFiles) {\n      return setFiles([]);\n    }\n\n    setLoading(true);\n\n    // Set the source to point to your PDF. In this example, we have the PDF\n    // inside of `public/assets`. You can add any path, or a URL to a PDF.\n    const source = process.env.PUBLIC_URL + '/assets/PDFTRON_about.pdf';\n\n    const newFiles = await splitPages(source);\n\n    setFiles(newFiles);\n    setLoading(false);\n  };\n\n  const handleDownloadPDF = async () => {\n    setLoading(true);\n\n    const file = await joinPages(files);\n    const blob = await file.fileObj.get();\n    const name = file.name;\n\n    fileSaver.saveAs(blob, name);\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <main className=\"app__main\">\n        {hasFiles ? (\n          <FileOrganizer\n            {...fileOrganizerProps}\n            className=\"organizer\"\n            onRenderDragLayer={() => <ThumbnailDragLayer numFiles={draggingIds.length} />}\n            onRenderThumbnail={({ id, onRenderThumbnailProps }) => (\n              <Thumbnail {...getThumbnailSelectionProps(id)} {...onRenderThumbnailProps} />\n            )}\n          />\n        ) : (\n          <div className=\"app__placeholder\">{loading ? <Spinner /> : 'Click Load PDF to begin organizing pages.'}</div>\n        )}\n      </main>\n      <footer className=\"app__footer\">\n        <ButtonGroup>\n          <Button disabled={loading} buttonStyle=\"borderless\" onClick={handleLoadPDF}>\n            {hasFiles ? 'Delete PDF' : 'Load PDF'}\n          </Button>\n          <Button disabled={loading || !hasFiles} onClick={handleDownloadPDF}>\n            Download PDF\n          </Button>\n        </ButtonGroup>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.CoreControls.setWorkerPath('./lib/core');\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}